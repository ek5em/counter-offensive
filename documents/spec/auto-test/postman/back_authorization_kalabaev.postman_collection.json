{
	"info": {
		"_postman_id": "c6f39eef-e481-4d38-a35f-838daf532b98",
		"name": "back_reg",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31364886",
		"_collection_link": "https://counter-offensive.postman.co/workspace/Counter-offensive(auto-tests)~dd6c1cd1-c609-49a6-83d9-0266d1c3255d/collection/31364886-c6f39eef-e481-4d38-a35f-838daf532b98?action=share&source=collection_link&creator=31364886"
	},
	"item": [
		{
			"name": "back_authorization",
			"item": [
				{
					"name": "registration",
					"item": [
						{
							"name": "correctRegistration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "correctRegistrationMaxLengthNick",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserregb'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserregtest'); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}b&nickname={{nickRegMax}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}b"
										},
										{
											"key": "nickname",
											"value": "{{nickRegMax}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "correctRegistrationMinLengthNick",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserrega'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('tes'); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}a&nickname={{nickRegMin}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}a"
										},
										{
											"key": "nickname",
											"value": "{{nickRegMin}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "correctRegistrationMinLengthLogin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testus'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginRegMin}}&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginRegMin}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "correctRegistrationMaxLegthLogin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserregtest'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginRegMax}}&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginRegMax}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyLogin(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login=&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": ""
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}&nickname={{nickReg}}&hash=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyNickname(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}&nickname=&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "loginOccupied(Error460)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(460);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Добавить пре-реквест с использованным логином"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidLogin(Error413)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(413);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}%&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}%"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidNickname(Error413)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 460', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(460);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=registration&login={{loginReg}}&nickname={{nickReg}}%&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}%"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "methodNotAllowed(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=&login={{loginReg}}&nickname={{nickReg}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "correntLogout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Checking the connection to the server\", () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=logout&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidToken(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Unauthorized', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=logout&token={{token}}^$%23%%23$%$%23%",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": "{{token}}^$%23%%23$%$%23%"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyToken(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=logout&token=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "methodNotAllowed(Error405)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/server/public/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "correctLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('Checking the connection to the server', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											" \r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											"\r",
											"pm.test('check response gamer_exp is correct', ()=>{ \r",
											"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
											"}); \r",
											" \r",
											"pm.test('check response next_rang is correct', ()=>{ \r",
											"    pm.expect(response.data.next_rang).to.eql(144); \r",
											"}); \r",
											" \r",
											"pm.test('check response level is correct', ()=>{ \r",
											"    pm.expect(response.data.level).to.eql(1); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login={{loginReg}}&hash={{hashReg}}&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyLogin(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login=&hash={{hashReg}}&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login={{loginReg}}&hash=&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": ""
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyRnd(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login={{loginReg}}&hash={{hashReg}}&rnd=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "rnd",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidLogin(Error403)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 403', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(403);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login={{loginReg}}&hash={{hashReg}}&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidHash(Error403)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(403);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=login&login={{loginReg}}&hash={{hashReg}}%&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}%"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "methodNotAllowed(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=&login={{loginReg}}&hash={{hashReg}}&rnd={{rnd}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "updatePassword",
					"item": [
						{
							"name": "updatePassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Соединение с сервером\", () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Успешное выполнение метода', () => {\r",
											"    const okok = pm.response.json();\r",
											"    pm.expect(okok.result).to.eql('ok');\r",
											"})\r",
											"\r",
											"pm.test('Ошибка 400 (Указаны не все обязательные параметры)', () => {\r",
											"    const error400 = pm.response.json();\r",
											"    pm.expect(error400.error.code).to.eql(400);\r",
											"})\r",
											"\r",
											"pm.test('Ошибка 401 (Неавторизованный запрос)', () => {\r",
											"    const error401 = pm.response.json();\r",
											"    pm.expect(error401.error.code).to.eql(401);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=updatePassword&token={{token}}&hash={{hashReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hashReg}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/server/public/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}
