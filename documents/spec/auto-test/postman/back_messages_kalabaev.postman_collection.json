{
	"info": {
		"_postman_id": "c6f39eef-e481-4d38-a35f-838daf532b98",
		"name": "back_mes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31364886",
		"_collection_link": "https://counter-offensive.postman.co/workspace/Counter-offensive(auto-tests)~dd6c1cd1-c609-49a6-83d9-0266d1c3255d/collection/31364886-c6f39eef-e481-4d38-a35f-838daf532b98?action=share&source=collection_link&creator=31364886"
	},
	"item": [
		{
			"name": "back_messages",
			"item": [
				{
					"name": "sendMessage",
					"item": [
						{
							"name": "correctSendMessage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ÐµmptyToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token=&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyMessage(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "minLength",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message={{messageMin}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{messageMin}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "maxLength",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message={{messageMax}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{messageMax}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "201Characters(Error432)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message={{message201}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message201}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "unacceptableSymbols(Error432)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message=%26*(^%26*@%23$%26*(%@%23",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "%26*(^%26*@%23$%26*(%@%23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "onlyFromSpaces(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}&message=       ",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "       "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "userNotExist(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage&token={{token}}111&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}111"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "methodNotAllowed(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=sendMessage1&token={{token}}&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/server/public/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "getMessages",
					"item": [
						{
							"name": "correctGetMessages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=getMessages&token={{token}}&hash=2",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=getMessages&token=&hash=2",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "hash",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=getMessages&token={{token}}&hash=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "userNotAllowed(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=getMessages&token={{token}}111&hash=2",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}111"
										},
										{
											"key": "hash",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "methodNotAllowed(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myData = pm.response.json();\r",
											"pm.environment.set('token', myData.token);\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Checking the connection to the server', () => {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"}) \r",
											" \r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/server/public/?method=getMessages1&token={{token}}&hash=2",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"server",
										"public",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/server/public/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}
